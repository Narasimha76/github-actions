name: CICD

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout source
      - name: Checkout source
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Step 4: Build, tag, and push image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: myapp
        run: |
          # Build the Docker image and tag it
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Step 5: Update ECS task definition with the new image
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: myapp-taskdefinition.json
          container-name: app
          image: ${{ steps.build-image.outputs.image }}

      # Step 6: Deploy the updated ECS task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: myapp-service
          cluster: narasimha-dev
          wait-for-service-stability: true

      # Step 7: Run integration tests
      - name: Run integration tests
        run: |
          echo "hello"

      # Step 8: Rollback on failure
      - name: Rollback on failure
        if: failure()
        run: |
          PREV_TASK_DEFINITION=$(aws ecs describe-services --cluster narasimha-dev --services myapp-service --query "services[0].taskDefinition" --output text)
          aws ecs update-service --cluster narasimha-dev --service myapp-service --task-definition $PREV_TASK_DEFINITION --force-new-deployment
